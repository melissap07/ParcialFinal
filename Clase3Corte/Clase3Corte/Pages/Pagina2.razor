@page "/Pagina2"
@inject HttpClient client;
@using System.Net.Http.Json
@using Clase3Corte.Data
<PageTitle>Libros</PageTitle>
<br />
<MudButton OnClick = "(args) => AgregarNuevoRegistro()" Variant="Variant.Filled" Color="Color.Error">Añadir</MudButton>
   

<MudDataGrid T="Libro" Items="@Libros" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <Column T="Libro" Field="IdLibro" Title="Id" IsEditable="false" />
        <Column T="Libro" Field="Titulo" Title="Titulo" />
        <Column T="Libro" Field="Editorial" Title="Editorial" />
        <Column T="Libro" Field="Autor" Title="Autor"/>
        <Column T="Libro" Field="Pagina" Title="Páginas" />
        <Column T="Libro" Field="Descripcion" Title="Descripción" />
        <Column T="Libro" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                 <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" OnClick="(args)=>EliminarEvento(context.Item)" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>



@code {
    private IEnumerable<Libro> Libros = new List<Libro>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        var elemento = new List<Libro>();
        client.BaseAddress = new Uri("https://localhost:7174/");
        var RequestMessage = new HttpRequestMessage(HttpMethod.Get, "Biblioteca/ConsultarLibros");
        var respuesta = await client.SendAsync(RequestMessage);

        Libros = elemento;
    }



    async void EliminarEvento(Libro elemento)
    {
                var i = elemento.IdLibro;
        ((List<Libro>)Libros).Remove(elemento);
        //client.BaseAddress = new Uri("https://localhost:7174/");
        var requestMessage = new HttpRequestMessage(HttpMethod.Delete, "Biblioteca/BorrarLibros?ID="+i+"");
        var respuesta = await client.SendAsync(requestMessage);
        StateHasChanged();
    }

    async Task AgregarNuevoRegistro()
    {

        var elemento = new Libro
            {
                IdLibro = 0000,
                Titulo = "Titulo",
                Editorial = "Editoria",
                Autor = "Autor",
                Pagina = 122,
                Descripcion = "Descripción",
            };
        ((List<Libro>)Libros).Add(elemento);
         var requestMessage = new HttpRequestMessage(HttpMethod.Post, "Biblioteca/AgregarLibro?IdLibro=0000&Titulo=Titulo&Editorial=Editorial&Autor=Autor&Pagina=Pagina&Descripcion=Descripcion");
        var respuesta = await client.SendAsync(requestMessage);
        if (respuesta.StatusCode == System.Net.HttpStatusCode.OK)
        {

        }
        StateHasChanged();
    
          }
    
    // events
    void StartedEditingItem(Libro item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CancelledEditingItem(Libro item)
    {
        _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    //este servirá para guardar o actualizar registros
    void CommittedItemChanges(Libro item)
    {
         var id = item.IdLibro;
        var titu = item.Titulo;
        var edit = item.Editorial;
        var aut = item.Autor;
        var pag = item.Pagina;
        var desc = item.Descripcion;
        var requestMessage = new HttpRequestMessage(HttpMethod.Put, "Biblioteca/ActualizarLibro?ID="+id+"&Titulo="+titu+"&Editorial="+edit+"&Autor="+aut+"&Pagina="+pag+"&Descripcion="+desc);
       
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        StateHasChanged();
    }
}